[
  {
    "message": "fix buffer overflow in string copy",
    "func": "void copy_string(char* dest, char* src, size_t dest_size) {\n    strncpy(dest, src, dest_size - 1);\n    dest[dest_size - 1] = '\\0';\n}"
  },
  {
    "message": "add user authentication",
    "func": "int authenticate(const char* password) {\n    char stored_pass[64];\n    if (fgets(stored_pass, sizeof(stored_pass), stdin) == NULL) {\n        return 0;\n    }\n    stored_pass[strcspn(stored_pass, \"\\n\")] = 0;\n    return strcmp(password, stored_pass) == 0;\n}"
  },
  {
    "message": "implement sql query function",
    "func": "void execute_query(const char* user_input) {\n    sqlite3_stmt *stmt;\n    const char* query = \"SELECT * FROM users WHERE name=?\";\n    sqlite3_prepare_v2(db, query, -1, &stmt, NULL);\n    sqlite3_bind_text(stmt, 1, user_input, -1, SQLITE_STATIC);\n    sqlite3_step(stmt);\n    sqlite3_finalize(stmt);\n}"
  },
  {
    "message": "add file access function",
    "func": "FILE* open_file(const char* filename) {\n    if (strstr(filename, \"..\") || strchr(filename, '/')) {\n        return NULL;\n    }\n    char path[256];\n    snprintf(path, sizeof(path), \"/data/%s\", filename);\n    return fopen(path, \"r\");\n}"
  },
  {
    "message": "process network data",
    "func": "void process_packet(const char* data, int size) {\n    if (size <= 0 || size > 512) {\n        return;\n    }\n    char buffer[513];\n    memcpy(buffer, data, size);\n    buffer[size] = '\\0';\n    printf(\"Received: %.*s\\n\", size, buffer);\n}"
  },
  {
    "message": "validate user input",
    "func": "int validate_input(const char* input) {\n    if (!input) return 0;\n    size_t len = strnlen(input, 64);\n    if (len >= 64) return 0;\n    return len > 0;\n}"
  },
  {
    "message": "format output string",
    "func": "void format_output(const char* user_data) {\n    printf(\"%s\\n\", user_data);\n}"
  },
  {
    "message": "handle command execution",
    "func": "void execute_command(const char* cmd) {\n    char* allowed_commands[] = {\"ls\", \"pwd\", \"date\", NULL};\n    for (int i = 0; allowed_commands[i]; i++) {\n        if (strcmp(cmd, allowed_commands[i]) == 0) {\n            execl(\"/bin/sh\", \"sh\", \"-c\", cmd, NULL);\n            return;\n        }\n    }\n    printf(\"Command not allowed\\n\");\n}"
  },
  {
    "message": "parse configuration file",
    "func": "void parse_config(const char* config_line) {\n    char key[51], value[51];\n    if (sscanf(config_line, \"%50[^=]=%50s\", key, value) == 2) {\n        if (validate_config_key(key)) {\n            setenv(key, value, 1);\n        }\n    }\n}"
  },
  {
    "message": "decrypt user data",
    "func": "void decrypt_data(const char* encrypted, const char* key, size_t max_len) {\n    if (!encrypted || !key || max_len == 0) return;\n    char* decrypted = malloc(max_len + 1);\n    if (!decrypted) return;\n    size_t key_len = strlen(key);\n    for(size_t i = 0; i < max_len && encrypted[i]; i++) {\n        decrypted[i] = encrypted[i] ^ key[i % key_len];\n    }\n    decrypted[max_len] = '\\0';\n    printf(\"Decrypted: %s\\n\", decrypted);\n    free(decrypted);\n}"
  }
]